{"version":3,"file":"index.js","sources":["../src/main.js"],"sourcesContent":["// // TASK 1\n\n// // Якщо імейл і пароль користувача збігаються, зберігайте дані з форми при сабмите\n// // у локальне сховище і змінюй кнопку login на logout і роби поля введення\n// // Недоступними зміни.\n\n// // При перезавантаженні сторінки, якщо користувач залогінений, ми маємо бачити logout-кнопку\n// // та недоступні для зміни поля з даними користувача.\n// // Клік по кнопці logout повертає все до початкового вигляду і видаляє дані користувача\n// // З локального сховища.\n// // Якщо введені дані не збігаються з потрібними даними, викликати аlert і\n// // повідомляти про помилку.\n\n// const USER_DATA = {\n// \temail: 'user@mail.com',\n// \tpassword: 'secret',\n// };\n\n// const LS_KEY = 'user-data';\n// const form = document.querySelector('.login-form');\n// const emailInput = document.querySelector('[name=\"email\"]');\n// const passwordInput = document.querySelector('[name=\"password\"]');\n// const btn = document.querySelector('.login-form button');\n\n// form.addEventListener('submit', handleLogin);\n\n// function handleLogin(event) {\n// \tevent.preventDefault();\n\n// \tif (btn.textContent === 'Logout') {\n// \t\tlocalStorage.removeItem(LS_KEY);\n// \t\tform.reset();\n// \t\temailInput.removeAttribute('readonly');\n// \t\tpasswordInput.removeAttribute('readonly');\n// \t\tbtn.textContent = 'Login';\n// \t\treturn;\n// \t}\n\n// \tconst emailValue = emailInput.value.trim();\n// \tconst passwordValue = passwordInput.value.trim();\n// \tif (emailValue === '' || passwordValue === '') {\n// \t\talert('Fill all fields');\n// \t\treturn;\n// \t}\n\n// \tif (emailValue !== USER_DATA.email || passwordValue !== USER_DATA.password) {\n// \t\talert('Incorrect data');\n// \t\treturn;\n// \t}\n\n// \tlocalStorage.setItem(\n// \t\tLS_KEY,\n// \t\tJSON.stringify({ email: emailValue, password: passwordValue })\n// \t);\n// \tbtn.textContent = 'Logout';\n// \temailInput.setAttribute('readonly', true);\n// \tpasswordInput.setAttribute('readonly', true);\n// }\n\n// const savedData = localStorage.getItem(LS_KEY);\n// if (savedData) {\n// \tconst parsedData = JSON.parse(savedData);\n// \temailInput.value = parsedData.email || '';\n// \tpasswordInput.value = parsedData.password || '';\n// \tbtn.textContent = 'Logout';\n// \temailInput.setAttribute('readonly', true);\n// \tpasswordInput.setAttribute('readonly', true);\n// }\n\n// // ЗАДАЧА 2\n\n// // Створи перелік справ.\n// // Є інпут, в який вводиться назва завдання.\n// // Після натискання на кнопку \"Додати\" завдання додається до списку #list.\n// // Список із завданнями має бути доступним після перезавантаження сторінки.\n\n// const formTask = document.querySelector('.task-form');\n// const taskList = document.querySelector('#task-list');\n// const TASKS_KEY = 'tasks';\n\n// const tasksArray = [];\n\n// formTask.addEventListener('submit', e => {\n// \te.preventDefault();\n\n// \tconst inputValue = formTask.elements.taskName.value.trim();\n\n// \tif (!inputValue) {\n// \t\treturn;\n// \t}\n\n// \tconst markup = `<li>${inputValue}</li>`;\n// \ttasksArray.push(markup);\n// \tlocalStorage.setItem(TASKS_KEY, JSON.stringify(tasksArray));\n\n// \ttaskList.insertAdjacentHTML('beforeend', markup);\n// \tformTask.reset();\n// });\n\n// const lsData = JSON.parse(localStorage.getItem(TASKS_KEY));\n\n// if (lsData) {\n// \ttaskList.innerHTML = lsData.join('');\n// }\n\n// - Використовуй prompt та повертай значення звідти.\n// - Створи функцію, яка буде набувати значення з prompt і всередині якої буде проміс.\n// Якщо значення не є числом, відхиляй проміс та логіруй \"error\".\n// Якщо значення парне, вирішуй проміс та повертай \"even\" через 1 секунду.\n// Якщо значення не парне, вирішуй проміс та повертай \"odd\" через 2 секунди.\n\n// function getPrompt() {\n// \tconst message = Number(prompt('Enter smth: '));\n// \treturn new Promise((resolve, reject) => {\n// \t\tif (isNaN(message)) {\n// \t\t\treject('error');\n// \t\t} else if (message % 2 === 0) {\n// \t\t\tsetTimeout(() => resolve('even'), 1000);\n// \t\t} else {\n// \t\t\tsetTimeout(() => resolve('odd'), 2000);\n// \t\t}\n// \t});\n// }\n\n// getPrompt()\n// \t.then(data => console.log(data))\n// \t.catch(error => console.log(error));\n\n// Напишіть функцію calculateAge(birthDate), яка приймає дату народження у форматі YYYY-MM-DD і повертає поточний вік.\n// Підказка: Використайте об'єкт Date для обчислення різниці між сьогоднішньою датою і датою народження.\n\nfunction calculateAge(birthDate) {\n    const current = new Date()\n    const birth = new Date(birthDate);\n    \n    let yearDiff = current.getFullYear() - birth.getFullYear();\n    let monthDiff = current.getMonth() - birth.getMonth();\n    let dayDiff = current.getDay() - birth.getDay();\n\n    if (monthDiff < 0 ||( monthDiff==0 && dayDiff < 0)) yearDiff -= 1; \n    return yearDiff;\n}\n\nconsole.log(calculateAge('2004-04-16'))\nconsole.log(calculateAge('2004-11-16'))"],"names":["calculateAge","birthDate","current","birth","yearDiff","monthDiff","dayDiff"],"mappings":"ssBAmIA,SAASA,EAAaC,EAAW,CAC7B,MAAMC,EAAU,IAAI,KACdC,EAAQ,IAAI,KAAKF,CAAS,EAEhC,IAAIG,EAAWF,EAAQ,YAAa,EAAGC,EAAM,YAAW,EACpDE,EAAYH,EAAQ,SAAU,EAAGC,EAAM,SAAQ,EAC/CG,EAAUJ,EAAQ,OAAQ,EAAGC,EAAM,OAAM,EAE7C,OAAIE,EAAY,GAAMA,GAAW,GAAKC,EAAU,KAAIF,GAAY,GACzDA,CACX,CAEA,QAAQ,IAAIJ,EAAa,YAAY,CAAC,EACtC,QAAQ,IAAIA,EAAa,YAAY,CAAC"}